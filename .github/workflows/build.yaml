name: "CI/CD"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Attention: you want to put version numbers like this in quotes! 
  # Else they will maybe interpreted as a number, which will e.g. remove traling zeros.
  GO_VERSION: "1.23.4"
  NODE_VERSION: "22.11.0"
  CONTAINER_IMAGE_NAME: "ghcr.io/rubenhoenle/ci-cd-lecture-project-template"
  CONTAINER_IMAGE_TAG: "latest"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  code-format:
    name: "Check code format"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install golang
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install node
        uses: actions/setup-node@v4
        with:
          node-version: '${{ env.NODE_VERSION }}'

      - name: Check code format (backend)
        run: files=$(gofmt -l ./backend) && [ -z "$files" ]

      - name: Install npm dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Check code format (frontend)
        working-directory: ./frontend
        run: npx prettier --check .

  backend:
    name: "Backend"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install golang
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Install node
        uses: actions/setup-node@v4
        with:
          node-version: '${{ env.NODE_VERSION }}'
      
      - name: Install npm dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build frontend
        working-directory: ./frontend
        run: npx ng build

      - name: Copy frontend build result
        run: cp -r frontend/dist/frontend/browser backend/cmd/strichliste/frontendDist
      
      - name: Run backend unit tests
        working-directory: ./backend
        run: go test ./...

      - name: Create test coverage report
        working-directory: ./backend
        run: go test ./... -coverprofile=coverage.out && go tool cover -html=coverage.out -o coverage.html

      - name: Upload test coverage report
        uses: actions/upload-artifact@v4
        with:
          name: test-coverage-report
          path: ./backend/coverage.html
          retention-days: 14

  deploy:
    name: "Deploy"
    runs-on: ubuntu-latest
    if: ${{ github.ref_name == 'main' }} && github.actor != 'dependabot[bot]'  # Skip if PR is from dependabot
    needs: [backend]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          # setup / start ssh auth socket which manages our ssh keys when connecting to other servers via ssh
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          # load the private key
          mkdir ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-add ~/.ssh/id_ed25519
          # setup known hosts
          # FYI: SSH_KNOWN_HOSTS secret stores the result of 'ssh-keyscan remote-server.com'
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" > ~/.ssh/known_hosts
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock

      - name: Download test coverage report
        uses: actions/download-artifact@v4
        with:
          name: test-coverage-report

      - name: Deploy code coverage report to webserver
        run: scp coverage.html ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/var/www/group6/coverage_michi.html


  build-and-push-container-image:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
      # 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see [Usage](https://github.com/docker/build-push-action#usage) in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see [AUTOTITLE](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds). 
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true


